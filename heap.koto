# A simple min-heap
#
# compare_fn can be redefined to alter the sorting behaviour
empty_heap =
  @meta data: []
  @meta compare_fn: |a, b| a < b

  insert: |self, value|
    data = self.data
    i = data.size()
    data.push value
    self.sift_up i

  pop: |self|
    data = self.data
    result = data.first()
    last = data.pop()
    if not data.is_empty()
      data[0] = last
      self.sift_down 0
    result

  is_empty: |self| self.data.is_empty()

  @meta sift_up: |self, i|
    if i == 0 then return
    parent = ((i - 1) / 2).floor()
    if self.compare_and_swap i, parent
      self.sift_up parent

  @meta sift_down: |self, i|
    data = self.data
    child_a = i * 2 + 1
    child = match data.get child_a
      null then return
      value_a then
        child_b = child_a + 1
        match data.get child_b
          null then child_a
          value_b then
            if self.compare_fn value_a, value_b
              child_a
            else
              child_b
    if self.compare_and_swap child, i
      self.sift_down child

  @meta compare_and_swap: |self, a, b|
    data = self.data
    value_a = data[a]
    value_b = data[b]
    if self.compare_fn value_a, value_b
      data[a] = value_b
      data[b] = value_a
      true
    else
      false

export make_heap = |values, compare_fn|
  heap = empty_heap.deep_copy()
  if compare_fn
    heap.compare_fn = compare_fn
  if values
    heap.data = values.to_list()
    for i in (heap.data.size() - 1)..=0
      heap.sift_down i
  heap

@tests =
  @test empty_heap: ||
    heap = make_heap()
    assert heap.is_empty()
    assert_eq heap.pop(), null
    heap.insert 8
    heap.insert 2.5
    heap.insert 5
    assert_eq heap.pop(), 2.5
    assert_eq heap.pop(), 5
    assert_eq heap.pop(), 8

  @test make_heap_with_initial_data: ||
    heap = make_heap (3, 5, 7, 9, 2, 4, 6, 1, 8)
    heap.insert 2.5
    assert_eq heap.pop(), 1
    assert_eq heap.pop(), 2
    assert_eq heap.pop(), 2.5
    assert_eq heap.pop(), 3

  @test make_heap_with_overridden_compare_fn: ||
    heap = make_heap [3, 5, 7, 9, 2, 4, 6, 1, 8], |a, b| a > b
    heap.insert 7.5
    assert_eq heap.pop(), 9
    assert_eq heap.pop(), 8
    assert_eq heap.pop(), 7.5
    assert_eq heap.pop(), 7
