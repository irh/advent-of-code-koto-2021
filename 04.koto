import io.print, string.to_number, test.assert_eq

# Parse the next 5 lines and, yield the 25 numbers that make up a board's grid
# e.g.
# 22 13 17 11  0
#  8  2 23  4 24
# 21  9 14 16  7
#  6 10  3 18  5
#  1 12 20 15 19
grid_iter = |lines|
  for line in lines.take 5
    for n in line.split " "
      if not n.is_empty()
        yield n.to_number()

make_board = |lines|
  # The 25 grid numbers stored as a flat tuple
  grid: grid_iter(lines).to_tuple()
  # 25 bools that indicate whether or not a grid cell has been marked
  marked: list.with_size 25, false
  # The number of marked cells in each row
  row_marked_count: list.with_size 5, 0
  # The number of marked cells in each column
  column_marked_count: list.with_size 5, 0
  # Whether or not the board is in a winning state,
  # i.e. a row or column has 5 marked cells
  has_won: false
  # Marks a number if found in the grid, and update the has_won flag
  mark_number: |self, number|
    x = self.grid.position |n| n == number
    if x != ()
      self.marked[x] = true
      row = (x / 5).floor()
      column = x % 5
      if (self.row_marked_count[row] += 1) == 5
        self.has_won = true
      if (self.column_marked_count[column] += 1) == 5
        self.has_won = true
  # Returns the board's score
  # Found by multiplying the last drawn number by the sum of the board's unmarked cells
  score: |self, last_number|
    last_number * self.grid.zip(self.marked)
      .keep |(_, marked)| not marked
      .each |(n, _)| n
      .sum()

parse_input = |input|
  lines = input.lines()

  # Parse the draw order
  # e.g. 3,8,27,17,9...
  draw_order =
    lines.next()
      .split ","
      .each string.to_number
      .to_tuple()

  # Parse the remaining lines as board grids
  boards_iter = ||
    while lines.next() != ()
      yield make_board lines
  boards = boards_iter().to_tuple()

  {draw_order, boards}

# Runs the game and yields winning board scores
run_game = |game|
  for n in game.draw_order
    for board in game.boards
      if not board.has_won
        board.mark_number n
        if board.has_won
          yield board.score n

export main = ||
  winning_scores = io.extend_path koto.script_dir, "input", "04"
    >> io.read_to_string
    >> parse_input
    >> run_game

  print "Part one: ${winning_scores.next()}" # 65325
  print "Part two: ${winning_scores.last()}" # 4624

export @tests =
  @pre_test: |self|
    self.game = parse_input "\
7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1

22 13 17 11  0
 8  2 23  4 24
21  9 14 16  7
 6 10  3 18  5
 1 12 20 15 19

 3 15  0  2 22
 9 18 13 17  5
19  8  7 25 23
20 11 10 24  4
14 21 16 12  6

14 21 17 24  4
10 16 15  9 19
18  8 23 26 20
22 11 13  6  5
 2  0 12  3  7"

  @test part_one: |self|
    assert_eq run_game(self.game).next(), 4512

  @test part_two: |self|
    assert_eq run_game(self.game).last(), 1924
